const m="http://localhost:4001";let p=!1;function d(){p||(console.log("PromptPilot background service worker initializing..."),c().then(e=>{console.log(`Backend health check: ${e?"OK":"Failed"}`)}).catch(e=>{console.error("Backend health check error:",e)}),p=!0,console.log("PromptPilot background service worker initialized"))}async function c(){try{return(await(await fetch(`${m}/health`,{method:"GET",headers:{"Content-Type":"application/json"}})).json()).status==="ok"}catch(e){return console.error("Error checking backend health:",e),!1}}chrome.runtime.onMessage.addListener((e,o,r)=>{if(console.log("Background received message:",e.type,"from",o.tab?"content script":"popup"),d(),e.type==="IMPROVE_AND_REPLACE"){const t=e.text;return console.log("IMPROVE_AND_REPLACE: Received text to improve, length:",t.length),console.log("IMPROVE_AND_REPLACE: Sender tab:",o.tab?o.tab.id:"undefined"),r({status:"processing"}),console.log("IMPROVE_AND_REPLACE: Sent processing response to content script"),h(t).then(s=>{if(console.log("Successfully improved prompt, sending for replacement"),console.log("Improved prompt:",s.substring(0,100)+"..."),o.tab&&typeof o.tab.id=="number"){const n=o.tab.id;console.log("Sending improved text to tab ID:",n),chrome.tabs.sendMessage(n,{type:"IMPROVED_TEXT_FOR_REPLACEMENT",text:s},i=>{const a=chrome.runtime.lastError;a?(console.error("Error sending improved text to content script:",a.message),setTimeout(()=>{chrome.tabs.sendMessage(n,{type:"IMPROVED_TEXT_FOR_REPLACEMENT",text:s},g=>{const l=chrome.runtime.lastError;l?console.error("Retry failed, error sending improved text:",l.message):console.log("Retry successful, content script updated text:",g)})},500)):console.log("Content script updated text successfully:",i)})}else console.error("Cannot send improved text: sender.tab or sender.tab.id is undefined",o)}).catch(s=>{if(console.error("Error improving prompt:",s),console.error("Full error object:",JSON.stringify(s,Object.getOwnPropertyNames(s))),o.tab&&typeof o.tab.id=="number"){const n=o.tab.id;chrome.tabs.sendMessage(n,{type:"IMPROVEMENT_ERROR",error:s.message||"Failed to improve prompt. Please try again."},i=>{const a=chrome.runtime.lastError;a&&console.error("Error sending error to content script:",a.message)})}else console.error("Cannot send error: sender.tab or sender.tab.id is undefined",o)}),!0}if(e.type==="CAPTURED_TEXT"){console.log("Received CAPTURED_TEXT, forwarding to popup");try{chrome.storage.session.set({lastCapturedText:e.text},()=>{console.log("Saved captured text to session storage")})}catch(t){console.error("Error saving to session storage:",t)}try{chrome.runtime.sendMessage(e,t=>{const s=chrome.runtime.lastError;console.log(s?"Note: Popup may not be open to receive text":"Text forwarded to popup")})}catch(t){console.error("Error forwarding message:",t)}return r({status:"received"}),!0}return e.type==="CHECK_BACKEND"?(c().then(t=>{r({status:t?"healthy":"unhealthy"})}).catch(t=>{r({status:"error",error:t.message})}),!0):(console.log("Unhandled message type:",e.type),r({status:"unhandled_message_type"}),!0)});async function h(e){console.log("improvePrompt: Starting prompt improvement for text of length:",e.length);try{console.log("improvePrompt: Checking backend health");const o=await c();if(console.log("improvePrompt: Backend health check result:",o),!o){console.log("improvePrompt: Backend not healthy, using demo mode");const r=`${e}

[DEMO MODE] This is a simulated improved prompt. In production, this would be an AI-enhanced version of your text.`;try{chrome.storage.session.set({lastImprovedText:r}),console.log("improvePrompt: Saved demo improved text to session storage")}catch(t){console.error("improvePrompt: Error saving improved text to session storage:",t)}return r}console.log("improvePrompt: Sending text to backend for improvement");try{const r=await fetch(`${m}/improve`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:e})});if(console.log("improvePrompt: Received response from backend:",r.status,r.statusText),!r.ok){const n=(await r.json().catch(()=>({}))).error||`Server returned ${r.status}: ${r.statusText}`;throw console.error("improvePrompt: Backend returned error:",n),new Error(n)}const t=await r.json().catch(()=>{throw new Error("Failed to parse backend response as JSON")});if(console.log("improvePrompt: Successfully parsed JSON response from backend"),!t.improvedPrompt)throw console.error("improvePrompt: Backend response missing improvedPrompt field:",t),new Error("Backend response missing improvedPrompt field");try{chrome.storage.session.set({lastImprovedText:t.improvedPrompt}),console.log("improvePrompt: Saved improved text to session storage")}catch(s){console.error("improvePrompt: Error saving improved text to session storage:",s)}return t.improvedPrompt}catch(r){throw console.error("improvePrompt: Error in fetch operation:",r),r}}catch(o){throw console.error("improvePrompt: Error in improvePrompt:",o),new Error(`Failed to improve prompt: ${o.message}`)}}d();chrome.runtime.onConnect.addListener(e=>{console.log("Connection established with",e.name),e.onMessage.addListener(o=>{console.log("Received port message:",o)}),e.onDisconnect.addListener(()=>{console.log("Port disconnected:",e.name)})});
